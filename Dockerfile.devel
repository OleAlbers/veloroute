# syntax=docker/dockerfile:experimental

FROM elixir:1.12.0-alpine AS base
ENTRYPOINT [ "mix" ]
WORKDIR /build
ENV GIT_COMMIT="dockerfile dummy"

RUN apk add --no-cache build-base optipng inkscape nodejs npm brotli git

ARG UID=1000
ARG GID=1000

ENV MIX_HOME=/mix
RUN mkdir /mix && chmod og+rw /mix

RUN addgroup --gid $GID fakeuser && \
  adduser \
  --disabled-password \
  --gecos "" \
  --ingroup fakeuser \
  --home /build \
  --uid $UID \
  fakeuser

USER $UID:$GID

RUN \
  mix local.hex --force && \
  mix local.rebar --force



# COPY mix.* /build/
# RUN MIX_ENV=test mix deps.get
# RUN --network=none \
#   MIX_ENV=test mix do deps.compile, dialyzer --plt


# # run like this: DOCKER_BUILDKIT=1 docker build .

# FROM elixir:1.12.0-alpine AS base
# WORKDIR /build
# ENV GIT_COMMIT="dockerfile dummy"

# FROM base AS elixirbase
# VOLUME "/app/build/videos"
# RUN apk add --no-cache build-base && \
#   mix local.hex --force && \
#   mix local.rebar --force
# COPY mix.* /build/
# RUN --mount=type=cache,target=/plt-cache/ \
#   mkdir -p /build/_build/test/ && \
#   cp -r /plt-cache/. /build/_build/test/ && \
#   MIX_ENV=test mix do deps.get, dialyzer --plt && \
#   cp -r /build/_build/test/*.plt /plt-cache/
# RUN --network=none \
#   MIX_ENV=test mix deps.compile && \
#   ln -s /build/_build/test /build/_build/prod

# FROM elixirbase AS testenv
# ENV MIX_ENV=test

# FROM elixirbase AS relenv
# ENV MIX_ENV=prod
# RUN mix deps.compile


# # FROM elixirbase AS relenv
# # ENV MIX_ENV=prod
# # COPY mix.* /build/
# # RUN  MIX_ENV=test mix do deps.get, dialyzer --plt && \
# #   cp -r /build/_build/test/*.plt /plt-cache/

# # COPY config/ /build/config/
# # COPY data/phoenix_credentials.exs data/settings.ex /build/data/
# # RUN --network=none mix deps.compile

# # FROM elixirbase AS phxbase
# # COPY ./ /build/
# # RUN --mount=type=cache,target=/data-cache/ \
# #   mkdir -p /build/data/cache/ && \
# #   cp -r /data-cache/. /build/data/cache/ && \
# #   MIX_ENV=test mix do compile, warm_caches, update_gpx && \
# #   cp -r /build/data/cache/. /data-cache/

# FROM base as faviconbuild
# RUN apk add --no-cache optipng inkscape
# COPY data/images/favicon.svg /build/data/images/favicon.svg
# COPY tools/update_favicons.sh /build/tools/update_favicons.sh
# RUN tools/update_favicons.sh

# # FROM phxbase as dialyzer
# # RUN \
# #   --network=none \
# #   --mount=target=/build/priv/plts/,type=cache \
# #   MIX_ENV=test mix dialyzer && \
# #   echo ok > /__dialyzerrun

# # FROM phxbase as test
# # RUN --network=none \
# #   MIX_ENV=test mix do test && \
# #   echo ok > /__test

# FROM elixirbase as assetsbuild
# RUN apk add --no-cache nodejs npm brotli git
# COPY ./assets/package* /build/assets/
# RUN npm install --prefix ./assetsbuild
# COPY ./assets/ /build/assets/
# COPY ./data/images/ /build/data/images/
# RUN npm run deploy --prefix ./assets
# COPY --from=faviconbuild /build/assets/static/favicons/ /build/assets/static/favicons/
# RUN  MIX_ENV=prod mix phx.digest && \
#   (find priv/static/ -type f -not -iname '*.png' -not -iname '*.gz' -not -iname '*.br' -print0 | xargs -r -0 -n1 -P0 brotli -f --best)

# # FROM phxbase as build
# # COPY --from=assets /build/priv/static/ /build/priv/static/
# # RUN --network=none \
# #   mkdir -p /build/rel/overlays/data/cache/ && \
# #   cp /build/data/cache/*.dets /build/rel/overlays/data/cache/ && \
# #   MIX_ENV=prod mix do deps.compile sentry --force, release
# # # ensure they succeeded
# # COPY --from=test /__test /
# # COPY --from=dialyzer /__dialyzerrun /


